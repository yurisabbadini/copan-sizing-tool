{"version":3,"file":"js/913.3595c9a4.js","mappings":"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","sources":["webpack://copan-sizing-tool/./src/engine.ts","webpack://copan-sizing-tool/./node_modules/vue-loader/dist/templateLoader.js","webpack://copan-sizing-tool/./node_modules/vue-cli-plugin-quasar/lib/loader.vue.auto-import-quasar.js","webpack://copan-sizing-tool/./src/components/DailyChart.vue"],"sourcesContent":["import { DailyData, GrowthTrends, LineConfig, PrimaryProtocol, SamplePerDay, SecondaryProtocol, Settings, WeightedDailyActivities, WeightedDayTimes } from \"./types\";\n\nfunction getYearIncrement(data: GrowthTrends): number {\n    const referenceIndex = data.yearOfReference - data.startYear;\n    const increments = data.growthTrends.splice(0, referenceIndex);\n    if (increments.length > 0) {\n        const yearIncrement = increments\n            .reduce((a, b) => a + b);\n        return yearIncrement;\n    }\n    return 0;\n}\n\nexport function getWeekDays(locale?: string)\n{\n    const baseDate = new Date(Date.UTC(2017, 0, 1)); // just a Sunday\n    const weekDays = [];\n    for(let i = 0; i < 7; i++)\n    {       \n        weekDays.push(baseDate.toLocaleDateString(locale, { weekday: 'long' }));\n        baseDate.setDate(baseDate.getDate() + 1);       \n    }\n    return weekDays;\n}\n\nexport function getWeightedDaysTimesInSeconds(\n    params: {\n        growthTrends: GrowthTrends;\n        primaryProtocols: PrimaryProtocol[];\n        secondaryProtocols: SecondaryProtocol[];\n        samplesPerDay: SamplePerDay[];\n        settings: Settings;\n    }\n): { weightedDaysTimesInSeconds: WeightedDayTimes[], weightedDaysTimesInSecondsPerProtocol: WeightedDayTimes[] } {\n    //const yearIncrement = getYearIncrement(params.growthTrends);\n\n    const weightedDaysTimesInSeconds: WeightedDayTimes[] = [];\n    const weightedDaysTimesInSecondsPerProtocol: WeightedDayTimes[] = [];\n\n    params.primaryProtocols.forEach((protocol) => {\n\n        const totalSamples = params.primaryProtocols\n            .map((x) => x.samplesPerDayAvg)\n            .reduce((a, b) => a + b);\n\n        const platesOverflowAir: {\n            dayOfWeek: number;\n            samples: number;\n        }[] = [];\n        for (let dayOfWeek = 0; dayOfWeek < 7; dayOfWeek++) {\n            platesOverflowAir.push({\n                dayOfWeek: dayOfWeek,\n                samples: 0\n            });\n        }\n\n        const platesOverflowCO2: {\n            dayOfWeek: number;\n            samples: number;\n        }[] = [];\n        for (let dayOfWeek = 0; dayOfWeek < 7; dayOfWeek++) {\n            platesOverflowCO2.push({\n                dayOfWeek: dayOfWeek,\n                samples: 0\n            });\n        }\n\n        let airDayOffset= 0;\n        const airReadHours = Math.max(\n            ...(protocol.wasplabData.air.readHours.split(\",\").map((x => Number(x))) || [])\n        );\n        if (airReadHours > 24) {\n            const tempDate = new Date(Date.UTC(2017, 0, 1)); // just a Sunday\n            const endDate = new Date(\n                tempDate.getTime() + airReadHours * 60 * 60 * 1000\n            );\n            airDayOffset = endDate.getDay() - tempDate.getDay();\n            for (let dayOfWeek = 0; dayOfWeek < 7; dayOfWeek++) {\n                for (let d = 1; d <= airDayOffset; d++) {\n                    let nextDay = dayOfWeek + d;\n                    if (nextDay > 6) {\n                        nextDay = 0;\n                    }\n                    const samplesPerDayIndex = platesOverflowAir.findIndex((x) => x.dayOfWeek == dayOfWeek);\n                    if (samplesPerDayIndex >= 0) {\n                        const nextDayIndex = platesOverflowAir.findIndex((x) => x.dayOfWeek == nextDay);\n                        if (nextDayIndex > -1) {\n                            const dayWeight = params.samplesPerDay.find((x) => x.dayOfWeek == dayOfWeek)?.samples || 0;\n                            platesOverflowAir[nextDayIndex].samples += (protocol.wasplabData.air?.platesPerSample || 0) * (((protocol.samplesPerDayAvg) / totalSamples) * dayWeight);\n                        }\n                    }\n                }\n            }\n        }\n\n        let co2DayOffset = 0;\n        const co2ReadHour = Math.max(\n            ...(protocol.wasplabData.co2.readHours.split(\",\").map((x => Number(x))) || [])\n        );\n        if (co2ReadHour > 24) {\n            const tempDate = new Date(Date.UTC(2017, 0, 1)); // just a Sunday\n            const endDate = new Date(\n                tempDate.getTime() + co2ReadHour * 60 * 60 * 1000\n            );\n            co2DayOffset = endDate.getDay() - tempDate.getDay();\n            for (let dayOfWeek = 0; dayOfWeek < 7; dayOfWeek++) {\n                for (let d = 1; d <= co2DayOffset; d++) {\n                    let nextDay = dayOfWeek + d;\n                    if (nextDay > 6) {\n                        nextDay = 0;\n                    }\n                    const samplesPerDayIndex = platesOverflowCO2.findIndex((x) => x.dayOfWeek == dayOfWeek);\n                    if (samplesPerDayIndex >= 0) {\n                        const dayWeight = params.samplesPerDay.find((x) => x.dayOfWeek == dayOfWeek)?.samples || 0;\n                        const nextDayIndex = platesOverflowCO2.findIndex((x) => x.dayOfWeek == nextDay);\n                        if (nextDayIndex > -1) {\n                            platesOverflowCO2[nextDayIndex].samples += (protocol.wasplabData.co2?.platesPerSample || 0) * (((protocol.samplesPerDayAvg) / totalSamples) * dayWeight);\n                        }                     \n                    }\n                }\n            }\n        }\n        const platesUnloadingAir: {\n            dayOfWeek: number;\n            samples: number;\n        }[] = [];\n        for (let dayOfWeek = 0; dayOfWeek < 7; dayOfWeek++) {\n            let unloadingDay = dayOfWeek + airDayOffset;\n            if(unloadingDay >= 7) {\n                unloadingDay -= 7;\n            }\n            const dayWeight = params.samplesPerDay.find((x) => x.dayOfWeek == dayOfWeek)?.samples || 0;\n            platesUnloadingAir.push({\n                dayOfWeek: unloadingDay,\n                samples: (protocol.wasplabData.air?.platesPerSample || 0) * (((protocol.samplesPerDayAvg) / totalSamples) * dayWeight)\n            });\n        }\n\n        const platesUnloadingCO2: {\n            dayOfWeek: number;\n            samples: number;\n        }[] = [];\n        for (let dayOfWeek = 0; dayOfWeek < 7; dayOfWeek++) {\n            let unloadingDay = dayOfWeek + co2DayOffset;\n            if(unloadingDay >= 7) {\n                unloadingDay -= 7;\n            }\n            const dayWeight = params.samplesPerDay.find((x) => x.dayOfWeek == dayOfWeek)?.samples || 0;\n            platesUnloadingCO2.push({\n                dayOfWeek: unloadingDay,\n                samples: (protocol.wasplabData.co2?.platesPerSample || 0) * (((protocol.samplesPerDayAvg) / totalSamples) * dayWeight)\n            });\n        }\n        \n        for (let dayOfWeek = 0; dayOfWeek < 7; dayOfWeek++) {\n\n            const dayWeight = params.samplesPerDay.find((x) => x.dayOfWeek == dayOfWeek)?.samples || 0;\n\n            const plates = (protocol.waspData.platesPerSample) * ((protocol.samplesPerDayAvg / totalSamples) * dayWeight);\n            const totalPlates = Math.ceil(plates);\n            const plateTime =\n                params.settings.plates.streakingPatterns.find(\n                    (x) => x.pattern == protocol.waspData.streakingPattern\n                )?.timeInSeconds || 0;\n            const totalPlatesTime = totalPlates * plateTime;\n\n            const slides =\n                protocol.waspData.slidesPerSample *\n                ((protocol.samplesPerDayAvg / totalSamples) * dayWeight);\n            const totalSlides = Math.ceil(slides);\n            let slideTime = params.settings.slides.streakingPatterns.find((x) => x.pattern == \"slide_and_other\")?.timeInSeconds || 0;\n            if (protocol.waspData.platesPerSample == 0) {\n                slideTime = params.settings.slides.streakingPatterns.find((x) => x.pattern == \"slide_only\")?.timeInSeconds || 0;\n            }\n            const totalSlidesTime = totalSlides * slideTime;\n\n            const broths =\n                protocol.waspData.brothsPerSample *\n                ((protocol.samplesPerDayAvg / totalSamples) * dayWeight);\n            const totalBroths = Math.ceil(broths);\n            const brothsTime = params.settings.broths.timeInSeconds;\n            const totalBrothsTime = totalBroths * brothsTime;\n\n            const loadingAirPlates =\n                (protocol.wasplabData.air?.platesPerSample || 0) *\n                ((protocol.samplesPerDayAvg / totalSamples) * dayWeight);\n            const totalLoadingAirPlates = Math.ceil(loadingAirPlates);\n            const loadingAirPlatesSpeed = params.settings.incubator.loadingPlatesPerHour;\n            const totalLoadingAirPlatesTime =\n                (totalLoadingAirPlates / loadingAirPlatesSpeed) * 3600;\n\n            const loadingCO2Plates =\n                (protocol.wasplabData.co2?.platesPerSample || 0) *\n                ((protocol.samplesPerDayAvg / totalSamples) * dayWeight);\n            const totalLoadingCO2Plates = Math.ceil(loadingCO2Plates);\n            const loadingCO2PlatesSpeed = params.settings.incubator.loadingPlatesPerHour;\n            const totalLoadingCO2PlatesTime =\n                (totalLoadingCO2Plates / loadingCO2PlatesSpeed) * 3600;\n\n            const recordingAirPlates =\n                (protocol.wasplabData.air?.platesPerSample || 0) *\n                (((protocol.samplesPerDayAvg) / totalSamples) * dayWeight);\n            const totalRecordingAirPlates = Math.ceil(recordingAirPlates + (platesOverflowAir.find((x) => x.dayOfWeek == dayOfWeek)?.samples || 0));\n            const recordingAirPlatesSpeed = params.settings.incubator.recordingPlatesPerHour;\n            const totalRecordingAirPlatesTime =\n                (totalRecordingAirPlates / recordingAirPlatesSpeed) * 3600;\n\n            const recordingCO2Plates =\n                ((protocol.wasplabData.co2?.platesPerSample || 0)) *\n                (((protocol.samplesPerDayAvg) / totalSamples) * dayWeight);\n            const totalRecordingCO2Plates = Math.ceil(recordingCO2Plates + (platesOverflowCO2.find((x) => x.dayOfWeek == dayOfWeek)?.samples || 0));\n            const recordingCO2PlatesSpeed = params.settings.incubator.recordingPlatesPerHour;\n            const totalRecordingCO2PlatesTime =\n                (totalRecordingCO2Plates / recordingCO2PlatesSpeed) * 3600;\n\n            let unloadingSpeed = params.settings.incubator.unloadingMultiplePlatesPerHour;\n            if (params.settings.incubator.singleIncubator == true) {\n                unloadingSpeed = params.settings.incubator.unloadingSinglePlatesPerHour;\n            }\n\n            const unloadingAirPlates = platesUnloadingAir.find((x) => x.dayOfWeek == dayOfWeek)?.samples || 0;\n            const totalUnloadingAirPlates = Math.ceil(unloadingAirPlates);\n            const unloadingAirPlatesSpeed = unloadingSpeed;\n            const totalUnloadingAirPlatesTime =\n                (totalUnloadingAirPlates / unloadingAirPlatesSpeed) * 3600;\n\n            const unloadingCO2Plates = platesUnloadingCO2.find((x) => x.dayOfWeek == dayOfWeek)?.samples || 0;\n            const totalUnloadingCO2Plates = Math.ceil(unloadingCO2Plates);\n            const unloadingCO2PlatesSpeed = unloadingSpeed;\n            const totalUnloadingCO2PlatesTime =\n                (totalUnloadingCO2Plates / unloadingCO2PlatesSpeed) * 3600;\n\n            const platesIndex = weightedDaysTimesInSeconds.findIndex(\n                (x) => x.type == \"plates\" && x.dayOfWeek == dayOfWeek\n            );\n            if (platesIndex < 0) {\n                weightedDaysTimesInSeconds.push({\n                    type: \"plates\",\n                    dayOfWeek: dayOfWeek,\n                    timeInSeconds: totalPlatesTime,\n                    samples: totalPlates,\n                });\n            } else {\n                weightedDaysTimesInSeconds[platesIndex].timeInSeconds +=\n                    totalPlatesTime;\n            }\n            weightedDaysTimesInSecondsPerProtocol.push({\n                type: \"plates\",\n                dayOfWeek: dayOfWeek,\n                timeInSeconds: totalPlatesTime,\n                samples: totalPlates,\n                protocol: protocol.id\n            });\n\n            const slidesIndex = weightedDaysTimesInSeconds.findIndex(\n                (x) => x.type == \"slides\" && x.dayOfWeek == dayOfWeek\n            );\n            if (slidesIndex < 0) {\n                weightedDaysTimesInSeconds.push({\n                    type: \"slides\",\n                    dayOfWeek: dayOfWeek,\n                    timeInSeconds: totalSlidesTime,\n                    samples: totalSlides,\n                });\n            } else {\n                weightedDaysTimesInSeconds[slidesIndex].timeInSeconds +=\n                    totalSlidesTime;\n            }\n            weightedDaysTimesInSecondsPerProtocol.push({\n                type: \"slides\",\n                dayOfWeek: dayOfWeek,\n                timeInSeconds: totalSlidesTime,\n                samples: totalSlides,\n                protocol: protocol.id\n            });\n\n            const brothsIndex = weightedDaysTimesInSeconds.findIndex(\n                (x) => x.type == \"broths\" && x.dayOfWeek == dayOfWeek\n            );\n            if (brothsIndex < 0) {\n                weightedDaysTimesInSeconds.push({\n                    type: \"broths\",\n                    dayOfWeek: dayOfWeek,\n                    timeInSeconds: totalBrothsTime,\n                    samples: totalBroths,\n                });\n            } else {\n                weightedDaysTimesInSeconds[brothsIndex].timeInSeconds +=\n                    totalBrothsTime;\n            }\n            weightedDaysTimesInSecondsPerProtocol.push({\n                type: \"broths\",\n                dayOfWeek: dayOfWeek,\n                timeInSeconds: totalBrothsTime,\n                samples: totalBroths,\n                protocol: protocol.id\n            });\n\n            const loadingAirIndex = weightedDaysTimesInSeconds.findIndex(\n                (x) => x.type == \"loading_air\" && x.dayOfWeek == dayOfWeek\n            );\n            if (loadingAirIndex < 0) {\n                weightedDaysTimesInSeconds.push({\n                    type: \"loading_air\",\n                    dayOfWeek: dayOfWeek,\n                    timeInSeconds: totalLoadingAirPlatesTime,\n                    samples: totalLoadingAirPlates,\n                });\n            } else {\n                weightedDaysTimesInSeconds[loadingAirIndex].timeInSeconds += totalLoadingAirPlatesTime;\n            }\n            weightedDaysTimesInSecondsPerProtocol.push({\n                type: \"loading_air\",\n                dayOfWeek: dayOfWeek,\n                timeInSeconds: totalLoadingAirPlatesTime,\n                samples: totalLoadingAirPlates,\n                protocol: protocol.id\n            });\n\n            const loadingCO2Index = weightedDaysTimesInSeconds.findIndex(\n                (x) => x.type == \"loading_co2\" && x.dayOfWeek == dayOfWeek\n            );\n            if (loadingCO2Index < 0) {\n                weightedDaysTimesInSeconds.push({\n                    type: \"loading_co2\",\n                    dayOfWeek: dayOfWeek,\n                    timeInSeconds: totalLoadingCO2PlatesTime,\n                    samples: totalLoadingCO2Plates,\n                });\n            } else {\n                weightedDaysTimesInSeconds[loadingCO2Index].timeInSeconds += totalLoadingCO2PlatesTime;\n            }\n            weightedDaysTimesInSecondsPerProtocol.push({\n                type: \"loading_co2\",\n                dayOfWeek: dayOfWeek,\n                timeInSeconds: totalLoadingCO2PlatesTime,\n                samples: totalLoadingCO2Plates,\n                protocol: protocol.id\n            });\n\n            const recordingAirIndex = weightedDaysTimesInSeconds.findIndex(\n                (x) => x.type == \"recording_air\" && x.dayOfWeek == dayOfWeek\n            );\n            if (recordingAirIndex < 0) {\n                weightedDaysTimesInSeconds.push({\n                    type: \"recording_air\",\n                    dayOfWeek: dayOfWeek,\n                    timeInSeconds: totalRecordingAirPlatesTime,\n                    samples: totalRecordingAirPlates,\n                });\n            } else {\n                weightedDaysTimesInSeconds[recordingAirIndex].timeInSeconds += totalRecordingAirPlatesTime;\n            }\n            weightedDaysTimesInSecondsPerProtocol.push({\n                type: \"recording_air\",\n                dayOfWeek: dayOfWeek,\n                timeInSeconds: totalRecordingAirPlatesTime,\n                samples: totalRecordingAirPlates,\n                protocol: protocol.id\n            });\n\n            const recordingCO2Index = weightedDaysTimesInSeconds.findIndex(\n                (x) => x.type == \"recording_co2\" && x.dayOfWeek == dayOfWeek\n            );\n            if (recordingCO2Index < 0) {\n                weightedDaysTimesInSeconds.push({\n                    type: \"recording_co2\",\n                    dayOfWeek: dayOfWeek,\n                    timeInSeconds: totalRecordingCO2PlatesTime,\n                    samples: totalRecordingCO2Plates,\n                });\n            } else {\n                weightedDaysTimesInSeconds[recordingCO2Index].timeInSeconds += totalRecordingCO2PlatesTime;\n            }\n            weightedDaysTimesInSecondsPerProtocol.push({\n                type: \"recording_co2\",\n                dayOfWeek: dayOfWeek,\n                timeInSeconds: totalRecordingCO2PlatesTime,\n                samples: totalRecordingCO2Plates,\n                protocol: protocol.id\n            });\n\n            const unloadingAirIndex = weightedDaysTimesInSeconds.findIndex(\n                (x) => x.type == \"unloading_air\" && x.dayOfWeek == dayOfWeek\n            );\n            if (unloadingAirIndex < 0) {\n                weightedDaysTimesInSeconds.push({\n                    type: \"unloading_air\",\n                    dayOfWeek: dayOfWeek,\n                    timeInSeconds: totalUnloadingAirPlatesTime,\n                    samples: totalUnloadingAirPlates,\n                });\n            } else {\n                weightedDaysTimesInSeconds[unloadingAirIndex].timeInSeconds += totalUnloadingAirPlatesTime;\n            }\n            weightedDaysTimesInSecondsPerProtocol.push({\n                type: \"unloading_air\",\n                dayOfWeek: dayOfWeek,\n                timeInSeconds: totalUnloadingAirPlatesTime,\n                samples: totalUnloadingAirPlates,\n                protocol: protocol.id\n            });\n\n            const unloadingCO2Index = weightedDaysTimesInSeconds.findIndex(\n                (x) => x.type == \"unloading_co2\" && x.dayOfWeek == dayOfWeek\n            );\n            if (unloadingCO2Index < 0) {\n                weightedDaysTimesInSeconds.push({\n                    type: \"unloading_co2\",\n                    dayOfWeek: dayOfWeek,\n                    timeInSeconds: totalUnloadingCO2PlatesTime,\n                    samples: totalUnloadingCO2Plates,\n                });\n            } else {\n                weightedDaysTimesInSeconds[unloadingCO2Index].timeInSeconds += totalUnloadingCO2PlatesTime;\n            }\n            weightedDaysTimesInSecondsPerProtocol.push({\n                type: \"unloading_co2\",\n                dayOfWeek: dayOfWeek,\n                timeInSeconds: totalUnloadingCO2PlatesTime,\n                samples: totalUnloadingCO2Plates,\n                protocol: protocol.id\n            });\n        }\n    });\n\n    params.secondaryProtocols.forEach((protocol) => {\n\n        const totalSamples = params.secondaryProtocols\n            .map((x) => x.samples)\n            .reduce((a, b) => a + b);\n\n        const platesOverflowAir: {\n            dayOfWeek: number;\n            samples: number;\n        }[] = [];\n        for (let dayOfWeek = 0; dayOfWeek < 7; dayOfWeek++) {\n            platesOverflowAir.push({\n                dayOfWeek: dayOfWeek,\n                samples: 0\n            });\n        }\n\n        const platesOverflowCO2: {\n            dayOfWeek: number;\n            samples: number;\n        }[] = [];\n        for (let dayOfWeek = 0; dayOfWeek < 7; dayOfWeek++) {\n            platesOverflowCO2.push({\n                dayOfWeek: dayOfWeek,\n                samples: 0\n            });\n        }\n\n        let airDayOffset= 0;\n        const airReadHours = Math.max(\n            ...(protocol.recordingO2.split(\",\").map((x => Number(x))) || [])\n        );\n        if (airReadHours > 24) {\n            const tempDate = new Date(Date.UTC(2017, 0, 1)); // just a Sunday\n            const endDate = new Date(\n                tempDate.getTime() + airReadHours * 60 * 60 * 1000\n            );\n            airDayOffset = endDate.getDay() - tempDate.getDay();\n            for (let dayOfWeek = 0; dayOfWeek < 7; dayOfWeek++) {\n                for (let d = 1; d <= airDayOffset; d++) {\n                    let nextDay = dayOfWeek + d;\n                    if (nextDay > 6) {\n                        nextDay = 0;\n                    }\n                    const samplesPerDayIndex = platesOverflowAir.findIndex((x) => x.dayOfWeek == dayOfWeek);\n                    if (samplesPerDayIndex >= 0) {\n                        const nextDayIndex = platesOverflowAir.findIndex((x) => x.dayOfWeek == nextDay);\n                        if (nextDayIndex > -1) {\n                            const dayWeight = params.samplesPerDay.find((x) => x.dayOfWeek == dayOfWeek)?.samples || 0;\n                            platesOverflowAir[nextDayIndex].samples += (protocol.platesO2 || 0) * (((protocol.samples) / totalSamples) * dayWeight);\n                        }\n                    }\n                }\n            }\n        }\n\n        let co2DayOffset = 0;\n        const co2ReadHour = Math.max(\n            ...(protocol.recordingCO2.split(\",\").map((x => Number(x))) || [])\n        );\n        if (co2ReadHour > 24) {\n            const tempDate = new Date(Date.UTC(2017, 0, 1)); // just a Sunday\n            const endDate = new Date(\n                tempDate.getTime() + co2ReadHour * 60 * 60 * 1000\n            );\n            co2DayOffset = endDate.getDay() - tempDate.getDay();\n            for (let dayOfWeek = 0; dayOfWeek < 7; dayOfWeek++) {\n                for (let d = 1; d <= co2DayOffset; d++) {\n                    let nextDay = dayOfWeek + d;\n                    if (nextDay > 6) {\n                        nextDay = 0;\n                    }\n                    const samplesPerDayIndex = platesOverflowCO2.findIndex((x) => x.dayOfWeek == dayOfWeek);\n                    if (samplesPerDayIndex >= 0) {\n                        const dayWeight = params.samplesPerDay.find((x) => x.dayOfWeek == dayOfWeek)?.samples || 0;\n                        const nextDayIndex = platesOverflowCO2.findIndex((x) => x.dayOfWeek == nextDay);\n                        if (nextDayIndex > -1) {\n                            platesOverflowCO2[nextDayIndex].samples += (protocol.platesCO2 || 0) * (((protocol.samples) / totalSamples) * dayWeight);\n                        }                     \n                    }\n                }\n            }\n        }\n\n        const platesUnloadingAir: {\n            dayOfWeek: number;\n            samples: number;\n        }[] = [];\n        for (let dayOfWeek = 0; dayOfWeek < 7; dayOfWeek++) {\n            let unloadingDay = dayOfWeek + airDayOffset;\n            if(unloadingDay >= 7) {\n                unloadingDay -= 7;\n            }\n            const dayWeight = params.samplesPerDay.find((x) => x.dayOfWeek == dayOfWeek)?.samples || 0;\n            platesUnloadingAir.push({\n                dayOfWeek: unloadingDay,\n                samples: (protocol.platesO2 || 0) * (((protocol.samples) / totalSamples) * dayWeight)\n            });\n        }\n\n        const platesUnloadingCO2: {\n            dayOfWeek: number;\n            samples: number;\n        }[] = [];\n        for (let dayOfWeek = 0; dayOfWeek < 7; dayOfWeek++) {\n            let unloadingDay = dayOfWeek + co2DayOffset;\n            if(unloadingDay >= 7) {\n                unloadingDay -= 7;\n            }\n            const dayWeight = params.samplesPerDay.find((x) => x.dayOfWeek == dayOfWeek)?.samples || 0;\n            platesUnloadingCO2.push({\n                dayOfWeek: unloadingDay,\n                samples: (protocol.platesCO2 || 0) * (((protocol.samples) / totalSamples) * dayWeight)\n            });\n        }\n\n        const streakingPattern = \n        params.settings.plates.streakingPatterns.find(\n            (x) => x.pattern == params.primaryProtocols.find((x) => x.id == protocol.id)?.waspData.streakingPattern\n        )?.timeInSeconds || 0;\n\n        for (let dayOfWeek = 0; dayOfWeek < 7; dayOfWeek++) {\n\n            const dayWeight = params.samplesPerDay.find((x) => x.dayOfWeek == dayOfWeek)?.samples || 0;\n\n            const plates = (protocol.plates) * ((protocol.samples / totalSamples) * dayWeight);\n            const totalPlates = Math.ceil(plates);\n            const plateTime = streakingPattern;\n            const totalPlatesTime = totalPlates * plateTime;\n\n            const loadingAirPlates =\n            (protocol.platesO2 || 0) *\n            ((protocol.samples / totalSamples) * dayWeight);\n            const totalLoadingAirPlates = Math.ceil(loadingAirPlates);\n            const loadingAirPlatesSpeed = params.settings.incubator.loadingPlatesPerHour;\n            const totalLoadingAirPlatesTime =\n                (totalLoadingAirPlates / loadingAirPlatesSpeed) * 3600;\n\n            const loadingCO2Plates =\n                (protocol.platesCO2 || 0) *\n                ((protocol.samples / totalSamples) * dayWeight);\n            const totalLoadingCO2Plates = Math.ceil(loadingCO2Plates);\n            const loadingCO2PlatesSpeed = params.settings.incubator.loadingPlatesPerHour;\n            const totalLoadingCO2PlatesTime =\n                (totalLoadingCO2Plates / loadingCO2PlatesSpeed) * 3600;\n\n            const recordingAirPlates =\n                (protocol.platesO2 || 0) *\n                (((protocol.samples) / totalSamples) * dayWeight);\n            const totalRecordingAirPlates = Math.ceil(recordingAirPlates + (platesOverflowAir.find((x) => x.dayOfWeek == dayOfWeek)?.samples || 0));\n            const recordingAirPlatesSpeed = params.settings.incubator.recordingPlatesPerHour;\n            const totalRecordingAirPlatesTime =\n                (totalRecordingAirPlates / recordingAirPlatesSpeed) * 3600;\n\n            const recordingCO2Plates =\n                ((protocol.platesCO2 || 0)) *\n                (((protocol.samples) / totalSamples) * dayWeight);\n            const totalRecordingCO2Plates = Math.ceil(recordingCO2Plates + (platesOverflowCO2.find((x) => x.dayOfWeek == dayOfWeek)?.samples || 0));\n            const recordingCO2PlatesSpeed = params.settings.incubator.recordingPlatesPerHour;\n            const totalRecordingCO2PlatesTime =\n                (totalRecordingCO2Plates / recordingCO2PlatesSpeed) * 3600;\n\n            let unloadingSpeed = params.settings.incubator.unloadingMultiplePlatesPerHour;\n            if (params.settings.incubator.singleIncubator == true) {\n                unloadingSpeed = params.settings.incubator.unloadingSinglePlatesPerHour;\n            }\n\n            const unloadingAirPlates = platesUnloadingAir.find((x) => x.dayOfWeek == dayOfWeek)?.samples || 0;\n            const totalUnloadingAirPlates = Math.ceil(unloadingAirPlates);\n            const unloadingAirPlatesSpeed = unloadingSpeed;\n            const totalUnloadingAirPlatesTime =\n                (totalUnloadingAirPlates / unloadingAirPlatesSpeed) * 3600;\n\n            const unloadingCO2Plates = platesUnloadingCO2.find((x) => x.dayOfWeek == dayOfWeek)?.samples || 0;\n            const totalUnloadingCO2Plates = Math.ceil(unloadingCO2Plates);\n            const unloadingCO2PlatesSpeed = unloadingSpeed;\n            const totalUnloadingCO2PlatesTime =\n            (totalUnloadingCO2Plates / unloadingCO2PlatesSpeed) * 3600;\n\n            const platesIndex = weightedDaysTimesInSeconds.findIndex(\n                (x) => x.type == \"plates\" && x.dayOfWeek == dayOfWeek\n            );\n            if (platesIndex < 0) {\n                weightedDaysTimesInSeconds.push({\n                    type: \"plates\",\n                    dayOfWeek: dayOfWeek,\n                    timeInSeconds: totalPlatesTime,\n                    samples: totalPlates,\n                });\n            } else {\n                weightedDaysTimesInSeconds[platesIndex].timeInSeconds +=\n                    totalPlatesTime;\n            }\n            const platesIndexPerProtocol = weightedDaysTimesInSecondsPerProtocol.findIndex((x) => x.type == \"plates\" && x.protocol == protocol.id && x.dayOfWeek == dayOfWeek);\n            if(platesIndexPerProtocol >= 0) {\n                weightedDaysTimesInSecondsPerProtocol[platesIndexPerProtocol].timeInSeconds += totalPlatesTime;\n                weightedDaysTimesInSecondsPerProtocol[platesIndexPerProtocol].samples += totalPlates;\n            }\n\n            const loadingAirIndex = weightedDaysTimesInSeconds.findIndex(\n                (x) => x.type == \"loading_air\" && x.dayOfWeek == dayOfWeek\n            );\n            if (loadingAirIndex < 0) {\n                weightedDaysTimesInSeconds.push({\n                    type: \"loading_air\",\n                    dayOfWeek: dayOfWeek,\n                    timeInSeconds: totalLoadingAirPlatesTime,\n                    samples: totalLoadingAirPlates,\n                });\n            } else {\n                weightedDaysTimesInSeconds[loadingAirIndex].timeInSeconds += totalLoadingAirPlatesTime;\n            }\n            const loadingAirIndexPerProtocol = weightedDaysTimesInSecondsPerProtocol.findIndex((x) => x.type == \"loading_air\" && x.protocol == protocol.id && x.dayOfWeek == dayOfWeek);\n            if(loadingAirIndexPerProtocol >= 0) {\n                weightedDaysTimesInSecondsPerProtocol[loadingAirIndexPerProtocol].timeInSeconds += totalPlatesTime;\n                weightedDaysTimesInSecondsPerProtocol[loadingAirIndexPerProtocol].samples += totalPlates;\n            }\n\n            const loadingCO2Index = weightedDaysTimesInSeconds.findIndex(\n                (x) => x.type == \"loading_co2\" && x.dayOfWeek == dayOfWeek\n            );\n            if (loadingCO2Index < 0) {\n                weightedDaysTimesInSeconds.push({\n                    type: \"loading_co2\",\n                    dayOfWeek: dayOfWeek,\n                    timeInSeconds: totalLoadingCO2PlatesTime,\n                    samples: totalLoadingCO2Plates,\n                });\n            } else {\n                weightedDaysTimesInSeconds[loadingCO2Index].timeInSeconds += totalLoadingCO2PlatesTime;\n            }\n            const loadingCO2IndexPerProtocol = weightedDaysTimesInSecondsPerProtocol.findIndex((x) => x.type == \"loading_co2\" && x.protocol == protocol.id && x.dayOfWeek == dayOfWeek);\n            if(loadingCO2IndexPerProtocol >= 0) {\n                weightedDaysTimesInSecondsPerProtocol[loadingCO2IndexPerProtocol].timeInSeconds += totalPlatesTime;\n                weightedDaysTimesInSecondsPerProtocol[loadingCO2IndexPerProtocol].samples += totalPlates;\n            }\n\n            const recordingAirIndex = weightedDaysTimesInSeconds.findIndex(\n                (x) => x.type == \"recording_air\" && x.dayOfWeek == dayOfWeek\n            );\n            if (recordingAirIndex < 0) {\n                weightedDaysTimesInSeconds.push({\n                    type: \"recording_air\",\n                    dayOfWeek: dayOfWeek,\n                    timeInSeconds: totalRecordingAirPlatesTime,\n                    samples: totalRecordingAirPlates,\n                });\n            } else {\n                weightedDaysTimesInSeconds[recordingAirIndex].timeInSeconds += totalRecordingAirPlatesTime;\n            }\n            const recordingAirIndexPerProtocol = weightedDaysTimesInSecondsPerProtocol.findIndex((x) => x.type == \"recording_air\" && x.protocol == protocol.id && x.dayOfWeek == dayOfWeek);\n            if(recordingAirIndexPerProtocol >= 0) {\n                weightedDaysTimesInSecondsPerProtocol[recordingAirIndexPerProtocol].timeInSeconds += totalPlatesTime;\n                weightedDaysTimesInSecondsPerProtocol[recordingAirIndexPerProtocol].samples += totalPlates;\n            }\n\n            const recordingCO2Index = weightedDaysTimesInSeconds.findIndex(\n                (x) => x.type == \"recording_co2\" && x.dayOfWeek == dayOfWeek\n            );\n            if (recordingCO2Index < 0) {\n                weightedDaysTimesInSeconds.push({\n                    type: \"recording_co2\",\n                    dayOfWeek: dayOfWeek,\n                    timeInSeconds: totalRecordingCO2PlatesTime,\n                    samples: totalRecordingCO2Plates,\n                });\n            } else {\n                weightedDaysTimesInSeconds[recordingCO2Index].timeInSeconds += totalRecordingCO2PlatesTime;\n            }\n            const recordingCO2IndexPerProtocol = weightedDaysTimesInSecondsPerProtocol.findIndex((x) => x.type == \"recording_co2\" && x.protocol == protocol.id && x.dayOfWeek == dayOfWeek);\n            if(recordingCO2IndexPerProtocol >= 0) {\n                weightedDaysTimesInSecondsPerProtocol[recordingCO2IndexPerProtocol].timeInSeconds += totalPlatesTime;\n                weightedDaysTimesInSecondsPerProtocol[recordingCO2IndexPerProtocol].samples += totalPlates;\n            }\n\n            const unloadingAirIndex = weightedDaysTimesInSeconds.findIndex(\n                (x) => x.type == \"unloading_air\" && x.dayOfWeek == dayOfWeek\n            );\n            if (unloadingAirIndex < 0) {\n                weightedDaysTimesInSeconds.push({\n                    type: \"unloading_air\",\n                    dayOfWeek: dayOfWeek,\n                    timeInSeconds: totalUnloadingAirPlatesTime,\n                    samples: totalUnloadingAirPlates,\n                });\n            } else {\n                weightedDaysTimesInSeconds[unloadingAirIndex].timeInSeconds += totalUnloadingAirPlatesTime;\n            }\n            const unloadingAirIndexPerProtocol = weightedDaysTimesInSecondsPerProtocol.findIndex((x) => x.type == \"unloading_air\" && x.protocol == protocol.id && x.dayOfWeek == dayOfWeek);\n            if(unloadingAirIndexPerProtocol >= 0) {\n                weightedDaysTimesInSecondsPerProtocol[unloadingAirIndexPerProtocol].timeInSeconds += totalPlatesTime;\n                weightedDaysTimesInSecondsPerProtocol[unloadingAirIndexPerProtocol].samples += totalPlates;\n            }\n\n            const unloadingCO2Index = weightedDaysTimesInSeconds.findIndex(\n                (x) => x.type == \"unloading_co2\" && x.dayOfWeek == dayOfWeek\n            );\n            if (unloadingCO2Index < 0) {\n                weightedDaysTimesInSeconds.push({\n                    type: \"unloading_co2\",\n                    dayOfWeek: dayOfWeek,\n                    timeInSeconds: totalUnloadingCO2PlatesTime,\n                    samples: totalUnloadingCO2Plates,\n                });\n            } else {\n                weightedDaysTimesInSeconds[unloadingCO2Index].timeInSeconds += totalUnloadingCO2PlatesTime;\n            }\n            const unloadingCO2IndexPerProtocol = weightedDaysTimesInSecondsPerProtocol.findIndex((x) => x.type == \"unloading_co2\" && x.protocol == protocol.id && x.dayOfWeek == dayOfWeek);\n            if(unloadingCO2IndexPerProtocol >= 0) {\n                weightedDaysTimesInSecondsPerProtocol[unloadingCO2IndexPerProtocol].timeInSeconds += totalPlatesTime;\n                weightedDaysTimesInSecondsPerProtocol[unloadingCO2IndexPerProtocol].samples += totalPlates;\n            }\n        }\n    });\n\n    console.log(weightedDaysTimesInSeconds);\n    return {\n        weightedDaysTimesInSeconds,\n        weightedDaysTimesInSecondsPerProtocol\n    }\n}\n\nexport function getWeightedDailyActivities(data: WeightedDayTimes[]): WeightedDailyActivities[] {\n    const res: WeightedDailyActivities[] = [];\n    data.forEach((x) => {\n        if (\n            x.type == \"plates\" ||\n            x.type == \"slides\" ||\n            x.type == \"broths\"\n        ) {\n            const dayIndex = res.findIndex(\n                (d) => d.dayOfWeek == x.dayOfWeek && d.type == \"wasp\"\n            );\n            if (dayIndex < 0) {\n                res.push({\n                    type: \"wasp\",\n                    dayOfWeek: x.dayOfWeek,\n                    timeInSeconds: x.timeInSeconds,\n                });\n            } else {\n                res[dayIndex].timeInSeconds += x.timeInSeconds;\n            }\n        } else if (x.type == \"loading_air\") {\n            const dayIndex = res.findIndex(\n                (d) => d.dayOfWeek == x.dayOfWeek && d.type == \"wasplab_air_loading\"\n            );\n            if (dayIndex < 0) {\n                res.push({\n                    type: \"wasplab_air_loading\",\n                    dayOfWeek: x.dayOfWeek,\n                    timeInSeconds: x.timeInSeconds,\n                });\n            } else {\n                if (res[dayIndex].timeInSeconds < x.timeInSeconds) {\n                    res[dayIndex].timeInSeconds = x.timeInSeconds;\n                }\n            }\n        } else if (x.type == \"loading_co2\") {\n            const dayIndex = res.findIndex(\n                (d) => d.dayOfWeek == x.dayOfWeek && d.type == \"wasplab_co2_loading\"\n            );\n            if (dayIndex < 0) {\n                res.push({\n                    type: \"wasplab_co2_loading\",\n                    dayOfWeek: x.dayOfWeek,\n                    timeInSeconds: x.timeInSeconds,\n                });\n            } else {\n                if (res[dayIndex].timeInSeconds < x.timeInSeconds) {\n                    res[dayIndex].timeInSeconds = x.timeInSeconds;\n                }\n            }\n        } else if (x.type == \"recording_air\") {\n            const dayIndex = res.findIndex(\n                (d) => d.dayOfWeek == x.dayOfWeek && d.type == \"wasplab_air_recording\"\n            );\n            if (dayIndex < 0) {\n                res.push({\n                    type: \"wasplab_air_recording\",\n                    dayOfWeek: x.dayOfWeek,\n                    timeInSeconds: x.timeInSeconds,\n                });\n            } else {\n                if (res[dayIndex].timeInSeconds < x.timeInSeconds) {\n                    res[dayIndex].timeInSeconds = x.timeInSeconds;\n                }\n            }\n        } else if (x.type == \"recording_co2\") {\n            const dayIndex = res.findIndex(\n                (d) => d.dayOfWeek == x.dayOfWeek && d.type == \"wasplab_co2_recording\"\n            );\n            if (dayIndex < 0) {\n                res.push({\n                    type: \"wasplab_co2_recording\",\n                    dayOfWeek: x.dayOfWeek,\n                    timeInSeconds: x.timeInSeconds,\n                });\n            } else {\n                if (res[dayIndex].timeInSeconds < x.timeInSeconds) {\n                    res[dayIndex].timeInSeconds = x.timeInSeconds;\n                }\n            }\n        } else if (x.type == \"unloading_air\") {\n            const dayIndex = res.findIndex(\n                (d) => d.dayOfWeek == x.dayOfWeek && d.type == \"wasplab_air_unloading\"\n            );\n            if (dayIndex < 0) {\n                res.push({\n                    type: \"wasplab_air_unloading\",\n                    dayOfWeek: x.dayOfWeek,\n                    timeInSeconds: x.timeInSeconds,\n                });\n            } else {\n                res[dayIndex].timeInSeconds += x.timeInSeconds;\n            }\n        } else if (x.type == \"unloading_co2\") {\n            const dayIndex = res.findIndex(\n                (d) => d.dayOfWeek == x.dayOfWeek && d.type == \"wasplab_co2_unloading\"\n            );\n            if (dayIndex < 0) {\n                res.push({\n                    type: \"wasplab_co2_unloading\",\n                    dayOfWeek: x.dayOfWeek,\n                    timeInSeconds: x.timeInSeconds,\n                });\n            } else {\n                res[dayIndex].timeInSeconds += x.timeInSeconds;\n            }\n        }\n    });\n    return res;\n}\n\nfunction getDayTotalTime(params: { data: WeightedDailyActivities[], dayOfWeek: number, samples: number }): DailyData {\n    const waspData =\n        params.data.find((x) => x.type == \"wasp\")?.timeInSeconds || 0;\n\n    const loadingAir =\n        params.data.find((x) => x.type == \"wasplab_air_loading\")?.timeInSeconds || 0;\n    const loadingCO2 =\n        params.data.find((x) => x.type == \"wasplab_co2_loading\")?.timeInSeconds || 0;\n    const loading = Math.max(loadingAir, loadingCO2);\n\n    const recordingAir =\n        params.data.find((x) => x.type == \"wasplab_air_recording\")?.timeInSeconds ||\n        0;\n    const recordingCO2 =\n        params.data.find((x) => x.type == \"wasplab_co2_recording\")?.timeInSeconds ||\n        0;\n    const recording = Math.max(recordingAir, recordingCO2);\n\n    const unloadingAir =\n        params.data.find((x) => x.type == \"wasplab_air_unloading\")?.timeInSeconds ||\n        0;\n    const unloadingCO2 =\n        params.data.find((x) => x.type == \"wasplab_co2_unloading\")?.timeInSeconds ||\n        0;\n    const unloading = unloadingAir + unloadingCO2;\n\n    const dayValue =\n        Math.max(waspData, loading) + recording + unloading;\n\n    return {\n        dayOfWeek: params.dayOfWeek,\n        totalTime: dayValue,\n        percentage: (dayValue / 3600) / 24 * 100,\n        totalSamples: params.samples,\n        isPeakDay: false\n    }\n}\n\nexport function getPeakDay(params: { data: WeightedDailyActivities[], samplesPerDay: SamplePerDay[] }): DailyData[] {\n    const res: DailyData[] = [];\n\n    for (let i = 0; i < 7; i++) {\n        const dayData = params.data.filter((x) => x.dayOfWeek == i);\n        const dailyData = getDayTotalTime({\n            data: dayData,\n            dayOfWeek: i,\n            samples: params.samplesPerDay.find((x) => x.dayOfWeek == i)?.samples || 0\n        });\n        res.push(dailyData);\n    }\n\n    res.sort((a, b) => {\n        return b.totalTime - a.totalTime;\n    });\n    res.forEach(element => {\n        element.percentage = element.totalTime / res[0].totalTime * 100\n        if(element.percentage == 100) {\n            element.isPeakDay = true;\n        }\n    });\n    res.sort((a, b) => {\n        return a.dayOfWeek - b.dayOfWeek;\n    });\n    return res;\n}\n\nexport function getPeakDayLineLoad(\n    params: {\n        dailyTimes: WeightedDailyActivities[];\n        lines: LineConfig[];\n    }\n): WeightedDailyActivities[] {\n    const res: WeightedDailyActivities[] = [];\n    params.dailyTimes.forEach((dt) => {\n        res.push({\n            dayOfWeek: dt.dayOfWeek,\n            timeInSeconds: dt.timeInSeconds,\n            type: dt.type\n        });\n    });\n\n    const waspData = params.lines.map((x) => x.numberOfWasp);\n    const wasplabAirData = params.lines.map((x) => x.numberOfO2Incubator);\n    const wasplabCO2Data = params.lines.map((x) => x.numberOfCO2Incubator);\n    let totalNumberOfWasp = 0;\n    if (waspData.length > 0) {\n        totalNumberOfWasp = waspData.reduce((a, b) => a + b);\n    }\n    let totalNumberOfWaspLabAir = 0;\n    if (wasplabAirData.length > 0) {\n        totalNumberOfWaspLabAir = wasplabAirData.reduce((a, b) => a + b);\n    }\n    let totalNumberOfWaspLabCO2 = 0;\n    if (wasplabCO2Data.length > 0) {\n        totalNumberOfWaspLabCO2 = wasplabCO2Data.reduce((a, b) => a + b);\n    }\n\n    const waspTimeIndex = res.findIndex((x) => x.type == \"wasp\");\n    if (waspTimeIndex > -1) {\n        res[waspTimeIndex].timeInSeconds /= totalNumberOfWasp;\n    }\n\n    const waspLabAirLoadingTimeIndex = res.findIndex((x) => x.type == \"wasplab_air_loading\");\n    if (waspLabAirLoadingTimeIndex > -1) {\n        res[waspLabAirLoadingTimeIndex].timeInSeconds /= totalNumberOfWaspLabAir;\n    }\n    const waspLabAirRecordingTimeIndex = res.findIndex((x) => x.type == \"wasplab_air_recording\");\n    if (waspLabAirRecordingTimeIndex > -1) {\n        res[waspLabAirRecordingTimeIndex].timeInSeconds /= totalNumberOfWaspLabAir;\n    }\n    const waspLabAirUnloadingTimeIndex = res.findIndex((x) => x.type == \"wasplab_air_unloading\");\n    if (waspLabAirUnloadingTimeIndex > -1) {\n        res[waspLabAirUnloadingTimeIndex].timeInSeconds /= totalNumberOfWaspLabAir;\n    }\n\n    const waspLabCO2LoadingTimeIndex = res.findIndex((x) => x.type == \"wasplab_co2_loading\");\n    if (waspLabCO2LoadingTimeIndex > -1) {\n        res[waspLabCO2LoadingTimeIndex].timeInSeconds /= totalNumberOfWaspLabCO2;\n    }\n    const waspLabCO2RecordingTimeIndex = res.findIndex((x) => x.type == \"wasplab_co2_recording\");\n    if (waspLabCO2RecordingTimeIndex > -1) {\n        res[waspLabCO2RecordingTimeIndex].timeInSeconds /= totalNumberOfWaspLabCO2;\n    }\n    const waspLabCO2UnloadingTimeIndex = res.findIndex((x) => x.type == \"wasplab_co2_unloading\");\n    if (waspLabCO2UnloadingTimeIndex > -1) {\n        res[waspLabCO2UnloadingTimeIndex].timeInSeconds /= totalNumberOfWaspLabCO2;\n    }\n\n    return res;\n}","import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createVNode as _createVNode } from \"vue\"\n\nconst _hoisted_1 = /*#__PURE__*/_createTextVNode(\"Daily volumes\")\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_q_item_label = _resolveComponent(\"q-item-label\")!\n  const _component_apexchart = _resolveComponent(\"apexchart\")!\n  const _component_q_card = _resolveComponent(\"q-card\")!\n\n  return (_ctx.dailyData.length > 0)\n    ? (_openBlock(), _createBlock(_component_q_card, {\n        key: 0,\n        class: \"q-pa-sm q-mt-sm\"\n      }, {\n        default: _withCtx(() => [\n          (_ctx.showTitle)\n            ? (_openBlock(), _createBlock(_component_q_item_label, {\n                key: 0,\n                class: \"q-mb-sm\",\n                overline: \"\"\n              }, {\n                default: _withCtx(() => [\n                  _hoisted_1\n                ]),\n                _: 1\n              }))\n            : _createCommentVNode(\"\", true),\n          _createVNode(_component_apexchart, {\n            type: \"bar\",\n            options: _ctx.chartOptions,\n            series: _ctx.series\n          }, null, 8, [\"options\", \"series\"])\n        ]),\n        _: 1\n      }))\n    : _createCommentVNode(\"\", true)\n}","\nimport { defineComponent, PropType } from 'vue';\nimport { getWeekDays } from '@/engine';\nimport { DailyData } from '@/types';\n\nexport default defineComponent({\n  name: 'DailyChart',\n  props: {\n    dailyData: {\n        type: Object as PropType<DailyData[]>,\n        required: true\n    },\n    showTitle: {\n        type: Object as PropType<boolean>,\n        required: false\n    }\n  },\n  setup() {\n    const weekDays = getWeekDays(\"en-US\");\n    weekDays.push(weekDays[0]);\n    weekDays.splice(0, 1);\n\n    const chartOptions = {\n        chart: {\n          id: \"vuechart-dailydata\",\n        },\n        xaxis: {\n          categories: weekDays\n        },\n        yaxis: {\n          max: 100\n        },\n        colors: [\n          function ({ value }: { value: string}) {\n              if (value == \"100.00\") {\n                return \"#022A55\";\n              } else {\n                return \"#7794FB\";\n              }\n            }\n        ]\n      };\n\n    return {\n      weekDays,\n      chartOptions\n    }\n  },\n  computed: {\n    series() {\n      const chartData = this.dailyData.map((x) => x.percentage.toFixed(2));\n      const series = [\n        {\n          name: \"series-dailydata\",\n          data: chartData,\n        },\n      ];\n      return series;\n    }\n  },\n});\n","import { render } from \"./DailyChart.vue?vue&type=template&id=a592358c&ts=true\"\nimport script from \"./DailyChart.vue?vue&type=script&lang=ts\"\nexport * from \"./DailyChart.vue?vue&type=script&lang=ts\"\n\nimport \"./DailyChart.vue?vue&type=style&index=0&id=a592358c&lang=css\"\n\nimport exportComponent from \"/home/runner/work/copan-sizing-tool/copan-sizing-tool/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__\nimport QCard from 'quasar/src/components/card/QCard.js';\nimport QItemLabel from 'quasar/src/components/item/QItemLabel.js';\nimport qInstall from \"../../node_modules/vue-cli-plugin-quasar/lib/runtime.auto-import.js\";\nqInstall(script, 'components', {QCard,QItemLabel});\n"],"names":["getWeekDays","locale","baseDate","Date","UTC","weekDays","i","push","toLocaleDateString","weekday","setDate","getDate","getWeightedDaysTimesInSeconds","params","weightedDaysTimesInSeconds","weightedDaysTimesInSecondsPerProtocol","primaryProtocols","forEach","protocol","totalSamples","map","x","samplesPerDayAvg","reduce","a","b","platesOverflowAir","dayOfWeek","samples","platesOverflowCO2","airDayOffset","airReadHours","Math","max","wasplabData","air","readHours","split","Number","tempDate","endDate","getTime","getDay","d","nextDay","samplesPerDayIndex","findIndex","nextDayIndex","dayWeight","samplesPerDay","find","platesPerSample","co2DayOffset","co2ReadHour","co2","platesUnloadingAir","unloadingDay","platesUnloadingCO2","plates","waspData","totalPlates","ceil","plateTime","settings","streakingPatterns","pattern","streakingPattern","timeInSeconds","totalPlatesTime","slides","slidesPerSample","totalSlides","slideTime","totalSlidesTime","broths","brothsPerSample","totalBroths","brothsTime","totalBrothsTime","loadingAirPlates","totalLoadingAirPlates","loadingAirPlatesSpeed","incubator","loadingPlatesPerHour","totalLoadingAirPlatesTime","loadingCO2Plates","totalLoadingCO2Plates","loadingCO2PlatesSpeed","totalLoadingCO2PlatesTime","recordingAirPlates","totalRecordingAirPlates","recordingAirPlatesSpeed","recordingPlatesPerHour","totalRecordingAirPlatesTime","recordingCO2Plates","totalRecordingCO2Plates","recordingCO2PlatesSpeed","totalRecordingCO2PlatesTime","unloadingSpeed","unloadingMultiplePlatesPerHour","singleIncubator","unloadingSinglePlatesPerHour","unloadingAirPlates","totalUnloadingAirPlates","unloadingAirPlatesSpeed","totalUnloadingAirPlatesTime","unloadingCO2Plates","totalUnloadingCO2Plates","unloadingCO2PlatesSpeed","totalUnloadingCO2PlatesTime","platesIndex","type","id","slidesIndex","brothsIndex","loadingAirIndex","loadingCO2Index","recordingAirIndex","recordingCO2Index","unloadingAirIndex","unloadingCO2Index","secondaryProtocols","recordingO2","platesO2","recordingCO2","platesCO2","platesIndexPerProtocol","loadingAirIndexPerProtocol","loadingCO2IndexPerProtocol","recordingAirIndexPerProtocol","recordingCO2IndexPerProtocol","unloadingAirIndexPerProtocol","unloadingCO2IndexPerProtocol","console","log","getWeightedDailyActivities","data","res","dayIndex","getDayTotalTime","loadingAir","loadingCO2","loading","recordingAir","recording","unloadingAir","unloadingCO2","unloading","dayValue","totalTime","percentage","isPeakDay","getPeakDay","dayData","filter","dailyData","sort","element","_hoisted_1","_createTextVNode","render","_ctx","_cache","$props","$setup","$data","$options","_component_q_item_label","_resolveComponent","_component_apexchart","_component_q_card","length","_openBlock","_createBlock","key","class","default","_withCtx","showTitle","overline","_","_createCommentVNode","_createVNode","options","chartOptions","series","defineComponent","name","props","Object","required","setup","splice","chart","xaxis","categories","yaxis","colors","value","computed","chartData","this","toFixed","__exports__","QCard"],"sourceRoot":""}